@font-face {
  src: url("../fonts/Roboto-Regular.woff2") format("woff2");
  font-family: "Roboto";
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}
@font-face {
  src: url("../fonts/Roboto-Bold.woff2") format("woff2");
  font-family: "Roboto";
  font-weight: 700;
  font-style: normal;
  font-display: swap;
}
@font-face {
  src: url("../fonts/Montserrat-Light.woff2") format("woff2");
  font-family: "Montserrat";
  font-weight: 300;
  font-style: normal;
  font-display: swap;
}
@font-face {
  src: url("../fonts/Montserrat-Medium.woff2") format("woff2");
  font-family: "Montserrat";
  font-weight: 500;
  font-style: normal;
  font-display: swap;
}
@font-face {
  src: url("../fonts/Montserrat-SemiBold.woff2") format("woff2");
  font-family: "Montserrat";
  font-weight: 600;
  font-style: normal;
  font-display: swap;
}
@font-face {
  src: url("../fonts/Montserrat-Bold.woff2") format("woff2");
  font-family: "Montserrat";
  font-weight: 700;
  font-style: normal;
  font-display: swap;
}
@font-face {
  src: url("../fonts/HeptaSlab-Light.woff2") format("woff2");
  font-family: "HeptaSlab";
  font-weight: 300;
  font-style: normal;
  font-display: swap;
}
@font-face {
  src: url("../fonts/HeptaSlab-Regular.woff2") format("woff2");
  font-family: "HeptaSlab";
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}
@font-face {
  src: url("../fonts/HeptaSlab-SemiBold.woff2") format("woff2");
  font-family: "HeptaSlab";
  font-weight: 600;
  font-style: normal;
  font-display: swap;
}
@font-face {
  src: url("../fonts/HeptaSlab-Bold.woff2") format("woff2");
  font-family: "HeptaSlab";
  font-weight: 700;
  font-style: normal;
  font-display: swap;
}
/**
  Normalization of the block model
 */
*,
::before,
::after {
  box-sizing: border-box;
}

/**
   Remove internal left margins for lis
   tags that have a class attribute
  */
:where(ul, ol):where([class]) {
  padding-left: 0;
}

/**
   Remove internal left margins for list
   tags that have a class attribute
  */
body,
:where(blockquote, figure):where([class]) {
  margin: 0;
}

/**
   We remove the outer vertical indents
   for the necessary tags, which have
   the class attribute
  */
:where(h1,
h2,
h3,
h4,
h5,
h6,
p,
ul,
ol,
dl):where([class]) {
  margin-block: 0;
}

:where(dd[class]) {
  margin-left: 0;
}

:where(fieldset[class]) {
  margin-left: 0;
  padding: 0;
  border: none;
}

/**
   Remove the standard marker for
   a bulleted list that has
   a class attribute
  */
:where(ul[class]) {
  list-style: none;
}

:where(address[class]) {
  font-style: normal;
}

/**
   Zero out the vertical margins of the paragraph,
   declare a local variable for the margin down,
   to avoid interaction with a more complex selector
  */
p {
  --paragraphMarginBottom: 24px;
  margin-block: 0;
}

/**
   The outer margin down for a paragraph without
   a class attribute that is not the last
   among its neighbors
  */
p:where(:not([class]):not(:last-child)) {
  margin-bottom: var(--paragraphMarginBottom);
}

/**
   Simplifying work with images and videos
  */
img,
video {
  display: block;
  max-width: 100%;
  height: auto;
}

/**
   Inherit font properties for input fields
  */
input,
textarea,
select,
button {
  font: inherit;
}

html {
  /**
   It will be useful in most situations
   (for example, when you need to "press"
   the footer to the bottom of the site)
  */
  height: 100%;
  /**
   Remove horizontal interface jump when
   scrollbar appears/disappears
  */
  scrollbar-gutter: stable;
}

/**
   Smooth scrolling
  */
html,
:has(:target) {
  scroll-behavior: smooth;
}

body {
  /**
   It will be useful in most situations
   (for example, when you need to "press"
   the footer to the bottom of the site)
  */
  min-height: 100%;
  /**
   Unified leading
  */
  line-height: 1.5;
}

/**
   Normalize the height of a link element
   when inspecting it in DevTools
  */
a:where([class]) {
  display: inline-flex;
}

/**
   Hand cursor when hovering over an element
  */
button,
label {
  cursor: pointer;
}

/**
   We bring svg elements to a single color
   (except for those that already have
   a fill attribute with a value of 'none'
   or start with 'url')
  */
:where([fill]:not([fill=none],
[fill^=url])) {
  fill: currentColor;
}

/**
   We bring svg elements to a single color
   (except for those that already have
   the stroke attribute specified with
   the value 'none')
  */
:where([stroke]:not([stroke=none],
[stroke^=url])) {
  stroke: currentColor;
}

/**
   Fixing a bug with delayed color
   change when interacting with svg elements
  */
svg * {
  transition-property: fill, stroke;
}

/**
   Bringing table frames to the classic 'collapse' look
  */
:where(table) {
  border-collapse: collapse;
  border-color: currentColor;
}

/**
   Remove all animations and transitions
   for people who prefer not to use them
  */
@media (prefers-reduced-motion: reduce) {
  *,
  ::before,
  ::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
.container {
  display: flex;
  flex-direction: column;
  max-width: var(--container-width-default);
  width: 100%;
  margin-inline: auto;
  padding-inline: var(--container-padding-inline);
}

.row {
  display: flex;
  flex-direction: row;
  width: 100%;
  justify-content: space-between;
}

.column {
  display: flex;
  flex-direction: column;
}

.visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  margin: -1px !important;
  border: 0 !important;
  padding: 0 !important;
  white-space: nowrap !important;
  clip-path: inset(100%) !important;
  clip: rect(0 0 0 0) !important;
  overflow: hidden !important;
}

.mobile-hidden {
  display: flex;
}
@media (max-width: 768px) {
  .mobile-hidden {
    display: none !important;
  }
}

.mobile-visible {
  display: none;
}
@media (max-width: 768px) {
  .mobile-visible {
    display: flex !important;
  }
}

.overlay {
  position: absolute !important;
  top: 0 !important;
  left: 0 !important;
  z-index: 999 !important;
}

:root {
  --color-white: #FFFFFF;
  --color-black: #000000;
  --color-purple: #6670EE;
  --color-lightpurple: #7274A0;
  --color-darkpurple: #33344B;
  --color-red: #F95993;
  --color-yellow: #FFA901;
  --color-green: #5EC697;
  --border-default: 1px solid var(--color-lightpurple);
  --font-family: "Montserrat", sans-serif;
  --second-family: "Roboto", sans-serif;
  --third-family: "HeptaSlab", serif;
  --container-padding-inline: 210px;
  --container-width-default: 1500px;
  --max-viewport-width: 1920px;
  --min-viewport-width: 375px;
  --button-padding-block: 21px;
  --button-padding-block-small: 12px;
  --input-padding-block: 24px;
  --trainsition: 0.3s ease;
}

/*# sourceMappingURL=styles.css.map */
